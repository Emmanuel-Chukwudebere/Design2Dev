(()=>{"use strict";var e=function(e,n,i,t){return new(i||(i=Promise))((function(o,a){function s(e){try{l(t.next(e))}catch(e){a(e)}}function r(e){try{l(t.throw(e))}catch(e){a(e)}}function l(e){var n;e.done?o(e.value):(n=e.value,n instanceof i?n:new i((function(e){e(n)}))).then(s,r)}l((t=t.apply(e,n||[])).next())}))};const n={isAnalyzing:!1,isExporting:!1,shouldCancel:!1,selectedDesignSystem:"react-native-paper",screenSpecs:[],error:null};function i(e,n){figma.ui.postMessage({type:e,payload:n})}function t(e,i){console.error(`Error in ${i}:`,e),n.error=e,figma.notify(`Error in ${i}: ${e.message}`,{error:!0})}function o(e){const i=[],t=new Set,o=new Map;return e.findAll((e=>{var n,o;const s={id:e.id,name:e.name,type:e.type.toLowerCase(),position:{x:e.x,y:e.y},dimensions:{width:e.width,height:e.height},styling:a(e),parent:null===(n=e.parent)||void 0===n?void 0:n.id,children:"children"in e?e.children.map((e=>e.id)):[],zIndex:e.parent?e.parent.children.indexOf(e):0};var r;if("TEXT"===e.type&&(s.content=e.characters,s.textStyle={fontFamily:(r=e.fontName,r&&"object"==typeof r&&"family"in r?e.fontName.family:"Inter"),fontSize:"number"==typeof e.fontSize?e.fontSize:16,fontWeight:400,lineHeight:"number"==typeof e.lineHeight?e.lineHeight:1.2,letterSpacing:"number"==typeof e.letterSpacing?e.letterSpacing:0,textAlign:(null===(o=e.textAlignHorizontal)||void 0===o?void 0:o.toLowerCase())||"left",color:"#000000"}),s.styling){const e=s.styling;(e.shadowColor||e.shadowOffset)&&t.add("react-native-shadow-2"),e.animation&&t.add("react-native-reanimated")}return i.push(s),!1})),{id:`screen-${e.id}`,name:e.name,dimensions:{width:e.width,height:e.height},layout:a(e),designSystem:n.selectedDesignSystem,elements:i,dependencies:Array.from(t),interactions:Object.fromEntries(o)}}function a(e){const n={};return"opacity"in e&&(n.opacity=e.opacity),"visible"in e&&(n.visible=e.visible),"rotation"in e&&(n.rotation=e.rotation),"blendMode"in e&&(n.blendMode=e.blendMode),"effects"in e&&(n.effects=e.effects.map((e=>{const n={type:e.type,visible:!0,blendMode:"NORMAL"};return"color"in e?Object.assign(Object.assign({},n),{color:e.color,offset:e.offset,radius:e.radius,spread:e.spread}):"radius"in e?Object.assign(Object.assign({},n),{radius:e.radius}):n}))),n}figma.showUI(__html__,{width:400,height:600}),console.log("Sending initial state"),i("PLUGIN_READY"),i("PAGE_INFO",{name:figma.currentPage.name,nodeCount:figma.currentPage.children.length}),figma.on("selectionchange",(()=>e(void 0,void 0,void 0,(function*(){const a=figma.currentPage.selection;if(a.length>0&&a.length<=8){const s=a.filter((e=>"FRAME"===e.type));if(s.length>0)try{n.isAnalyzing=!0,i("ANALYSIS_STARTED");const t=yield function(i){return e(this,void 0,void 0,(function*(){try{const t=i.map(o);return yield Promise.all(t.map((i=>e(this,void 0,void 0,(function*(){const e=yield fetch("http://localhost:3000/api/analyze",{method:"POST",headers:{"Content-Type":"application/json",Authorization:"Bearer d2d1"},body:JSON.stringify({screen:i,designSystem:n.selectedDesignSystem})});if(!e.ok)throw new Error(`Analysis failed: ${e.statusText}`);return e.json()})))))}catch(e){throw console.error("Analysis error:",e),e}}))}(s);n.screenSpecs=t,i("ANALYSIS_COMPLETE",{screenSpecs:t,designSystem:n.selectedDesignSystem})}catch(e){t(e,"analysis"),i("ANALYSIS_FAILED")}finally{n.isAnalyzing=!1}}})))),figma.ui.onmessage=o=>e(void 0,void 0,void 0,(function*(){console.log("Plugin received message:",o);try{switch(o.type){case"INIT":console.log("Received INIT message, sending PLUGIN_READY"),i("PLUGIN_READY"),i("PAGE_INFO",{name:figma.currentPage.name,nodeCount:figma.currentPage.children.length});break;case"ANALYZE_SCREENS":if(n.isAnalyzing||n.isExporting)return void figma.ui.postMessage({type:"ANALYSIS_ERROR",payload:{error:"Another operation is in progress"}});n.isAnalyzing=!0,n.shouldCancel=!1;try{const i=figma.currentPage.selection;if(0===i.length)throw new Error("Please select at least one frame to analyze");if(i.length>8)throw new Error("Please select no more than 8 frames");const t=i.filter((e=>"FRAME"===e.type));if(0===t.length)throw new Error("Please select valid frames to analyze");figma.ui.postMessage({type:"ANALYSIS_PROGRESS",payload:{message:"Analyzing frames..."}});const a=yield Promise.all(t.map(((i,a)=>e(void 0,void 0,void 0,(function*(){if(n.shouldCancel)throw new Error("Analysis cancelled");return figma.ui.postMessage({type:"ANALYSIS_PROGRESS",payload:{message:`Analyzing frame ${a+1} of ${t.length}...`}}),yield s(i,o.payload.designSystem)})))));if(n.shouldCancel)throw new Error("Analysis cancelled");figma.ui.postMessage({type:"ANALYSIS_PROGRESS",payload:{message:"Finalizing analysis..."}}),figma.ui.postMessage({type:"ANALYSIS_COMPLETE",payload:{screenSpecs:a}})}catch(e){n.shouldCancel||figma.ui.postMessage({type:"ANALYSIS_ERROR",payload:{error:e instanceof Error?e.message:"Unknown error"}})}finally{n.isAnalyzing=!1,n.shouldCancel=!1}break;case"EXPORT_BUNDLE":if(n.isAnalyzing||n.isExporting)return void figma.ui.postMessage({type:"EXPORT_ERROR",payload:{error:"Another operation is in progress"}});n.isExporting=!0,n.shouldCancel=!1;try{if(n.shouldCancel)throw new Error("Export cancelled");const{screenSpecs:e}=o.payload,i=yield r(e);if(n.shouldCancel)throw new Error("Export cancelled");figma.ui.postMessage({type:"EXPORT_COMPLETE",payload:{bundle:i}})}catch(e){n.shouldCancel||figma.ui.postMessage({type:"EXPORT_ERROR",payload:{error:e instanceof Error?e.message:"Unknown error"}})}finally{n.isExporting=!1,n.shouldCancel=!1}break;case"CANCEL_OPERATION":n.shouldCancel=!0;break;default:console.log("Unknown message type:",o.type)}}catch(e){console.error("Error handling message:",e),t(e,"message handling")}})),figma.on("close",(()=>{n.isAnalyzing=!1,n.isExporting=!1,n.error=null}));const s=(n,i)=>e(void 0,void 0,void 0,(function*(){return{id:n.id,name:n.name,dimensions:{width:n.width,height:n.height},layout:{layoutMode:n.layoutMode,primaryAxisAlignItems:n.primaryAxisAlignItems,counterAxisAlignItems:n.counterAxisAlignItems,padding:n.paddingTop?{top:n.paddingTop,right:n.paddingRight,bottom:n.paddingBottom,left:n.paddingLeft}:void 0,itemSpacing:n.itemSpacing},designSystem:i,dependencies:[],interactions:{},elements:[]}})),r=n=>e(void 0,void 0,void 0,(function*(){return{screens:n,timestamp:(new Date).toISOString()}}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,